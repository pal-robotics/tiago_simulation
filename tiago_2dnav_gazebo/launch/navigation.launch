<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="state" default="localization"/>

  <arg name="planner"           default="base"/>
  <arg name="global_planner"    default="global_planner"/>
  <arg name="local_planner"     default="pal"/>
  <arg name="localization"      default="amcl"/>
  <arg name="mapping"           default="karto"/>
  <arg name="public_sim"        default="false"/>
  <arg name="disable_vo"        default="false"/>
  <arg name="rgbd_sensors"      default="false"/>
  <arg name="robot_namespace"   default=""/>
  <arg name="multiple"          default="false"/>
  <arg name="scan_topic"        default="scan_raw"/>
  <arg name="config_base_path"  default="$(find pal_navigation_cfg_tiago)"/>
  <arg name="laser_model"       default="sick-571"/>
  <arg name="base_type"         default="pmb2"/>
  <arg name="map"               default="$(env HOME)/.pal/tiago_maps/config"/>

  <!-- Map -->
  <!-- Localization or Mapping state -->
  <group if="$(arg public_sim)">
    <node pkg="pal_navigation_sm" type="navigation.sh" name="navigation"
        args="tiago $(arg state) $(arg localization) $(arg mapping) $(arg map) $(arg scan_topic) $(arg laser_model) $(arg base_type) $(arg multiple) $(arg robot_namespace)" output="screen"/>
  </group>

  <group unless="$(arg public_sim)">
    <include file="$(find pal_map_manager)/launch/pal_map_manager.launch">
      <arg name="map"       value="$(arg map)"/>
      <arg name="namespace"     value="$(arg robot_namespace)"/>
      <arg name="use_hostname"  value="false"/>
    </include>
  </group>

  <!-- Navigation State Machine -->
  <include file="$(find tiago_2dnav)/launch/state_machine.launch">
    <arg name="state"           value="$(arg state)"/>
    <arg name="public_sim"      value="$(arg public_sim)"/>
    <arg name="is_sim"          value="true"/>
    <arg name="multiple"        value="$(arg multiple)"/>
    <arg name="robot_namespace" value="$(arg robot_namespace)"/>
    <arg if="$(arg multiple)"   name="map_frame" value="/$(arg robot_namespace)/map"/>
    <arg if="$(arg multiple)"   name="base_frame" value="/$(arg robot_namespace)/base_footprint"/>
  </include>

  <!-- Planning -->
  <include file="$(find tiago_2dnav)/launch/move_$(arg planner).launch">
    <arg name="global_planner" value="$(arg global_planner)"/>
    <arg name="local_planner"  value="$(arg local_planner)"/>
    <arg name="public_sim"     value="$(arg public_sim)"/>
    <arg name="rgbd_sensors"   value="$(arg rgbd_sensors)"/>
    <arg name="robot_namespace"      value="$(arg robot_namespace)"/>
    <arg name="multiple"       value="$(arg multiple)"/>
    <arg name="config_base_path" value="$(arg config_base_path)"/>
    <arg name="base_type"       value="$(arg base_type)"/>
  </include>

  <group unless="$(arg public_sim)">
    <!-- VO map server -->
    <include file="$(find pal_vo_server)/launch/vo_server.launch"/>

    <!-- Highways server -->
    <include file="$(find highways_server)/launch/highways_server.launch"/>
  </group>

  <!-- Robot Pose Publisher -->
  <include file="$(find robot_pose)/launch/robot_pose.launch">
    <arg name="robot_prefix"      value="$(arg robot_namespace)"/>
  </include>

  <group if="$(eval arg('base_type') == 'omni_base')">
    <!-- Laser Scan Merger -->
    <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen"
      launch-prefix="bash -c 'sleep 5; $0 $@' ">
      <param name="destination_frame" value="virtual_base_laser_link"/>
      <param name="cloud_destination_topic" value="/merged_cloud"/>
      <param name="scan_destination_topic" value="/scan_raw"/>
      <param name="laserscan_topics" value ="/scan_front_raw /scan_rear_raw" /> 
      <param name="time_increment" value ="0.0" /> 
      <param name="scan_time" value ="0.0" /> 
      <param name="range_min" value ="0.05" /> 
      <param name="range_max" value ="25.0" /> 
      <param name="angle_min" value ="-3.1459" /> 
      <param name="angle_max" value ="3.1459" /> 
      <param name="angle_increment" value ="0.005769" /> 
    </node>
  </group>

  <!-- Laser filter (empty for public sim) -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain">
    <rosparam file="$(find tiago_laser_sensors)/config/$(arg laser_model)_filter.yaml" 
              command="load" 
              unless="$(eval arg('public_sim') or arg('multiple'))"/> 
    <remap from="scan"          to="scan_raw"/>
    <remap from="scan_filtered" to="scan"/>
  </node>

</launch>
